openapi: 3.0.2
info:
  version: 2.1
  title: Topcontent REST API
  termsOfService: 'https://topcontent.com/terms-and-conditions/'
  contact:
    email: support@topcontent.com
  x-logo:
    url: 'https://topcontent.com/developers/api-documentation/images/logo_doc.png'
#  description: >
#externalDocs:
#  description: Find out how to create a GitHub repo for your OpenAPI definition.
#  url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - name: Overview
    description: |
      The Topcontent API allows you to connect your app to Topcontent and order human made translations and content automatically through API calls. It makes it possible for your website, or back-end, and Topcontent to communicate by sending HTTP requests back and forth.

      This page provides an overview of the Topcontent API.

      This is a full documentation. If it’s in the API it’s in the documentation. If you have any questions about integrating our API, please <a targeet="_blank" href="https://topcontent.com/contact-us/">contact us</a>. We’re happy to help!

      ## REST API

      The API implements a **Representational state transfer** (REST) architecture. It sounds technical, but it’s really quite easy. It mainly breaks down to the HTTP-methods `GET`, `PATCH`, `POST` and `DELETE` matching the operations to **read**, **update**, **create** and **delete**.

      REST also implies a nice and clean structure for URLs or endpoints. This means you can reach any part of the Topcontent API on `https://api.topcontent.com/v2/` adding the name of the resource you want to interact with.

      ## Headers
      Make sure the following content type headers are set on every request:

      ```Accept: application/json``` ```Content-Type: application/json```

      ## Encoding
      The Topcontent API expects all data to be UTF-8 encoded and will respond with UTF-8 encoded data. Make sure you encode your data in UTF-8 to avoid issues.

      ## Throttling
      To ensure fair usage of our API, we put limits on the number of requests per originating IP address.

      The limit is 100 requests/second.

      Requests are tracked at millisecond granularity. For example, a 100 requests/second corresponds to 10 requests every 100 milliseconds.

      ## Quality levels supported through the API

      Currently, our API supports the ```standard``` and ```business``` quality levels for translation orders and ```raw```, ```standard``` and ```business``` for content orders.

      Please see our <a target="_blind" href="https://topcontent.com/pricing/topcontent-quality-levels/">Quality Levels</a> page for more information.
  - name: Workflows
    description: |
      ## Submitting an order

      Submitting an order to the Topcontent API is a straightforward process.
      First, you’ll need to identify the content you want to have translated or written and build an item payload that includes all necessary information.
      This could be one large piece of text, such as an email or a blog post, or this could be several smaller content strings.
      Each piece of content that is uniquely identified in your code will be its own `item`.

      In your system, these are likely associated with a unique ID in a database.
      It’s good practice to keep track of which API call is connected  to which row in the database so that when the Topcontent API returns the item you are able to easily identify where it should be added to your system.
      The way to do this is by using the `custom_data` parameter.

      The most common way to work with the Topcontent API is to set a location for us to push notifications to.
      This is done by setting the `callback_url` to a publicly accessible endpoint.
      Whenever there is an update to the item, like when our team has finished the item, the Topcontent API will POST the content to that endpoint.

      When ordering content through the API, remember that the same rules apply as when ordering through the self service system.
      The more information and the more detailed instructions you give the writers the better text you will receive back.
      All context for an item can be appended to the `instructions` parameter when sending an item.
      For example, if you have a URL to a photo that could go along with a product description or a URL to a blog post, these should be included.
      You may also want to include a style guide to maintain a consistent tone across all of the work Topcontent does for you.

      Once an order has been placed, you will receive an `order_id` back.

      ## Checking on the status of the order

      Once an item has been sent to the Topcontent API, it can go through a few different statuses.
      If your client account doesn’t have enough credits the items will be saved as drafts and the status of these items will be Draft.

      If the client account has enough credits the items in the order will immediately go to production and the status of these items will be `in_production`.
      The items will remain in this state until they are finished.
      At this time the item will either be in a `reviewable` state (if you want to review the item and perhaps communicate with our writers about changes you’d like to have made) or it will be in the `approved` state.

      At any time you can get an update on the items in the order by sending a request to the `GET /translations/orders/{id}` for translation items and `GET /content/orders/{id}` for content orders endpoint.

      ## Getting the items back

      The Topcontent API will send the finished items to your system as our team finishes them.
      However, if you’d like to poll our system for an update, or to retrieve items, that can be done by passing a comma-separated list of item ids to `GET /translations/items?ids=45646,45647,45648` for translation orders and to `GET /content/items?ids=45646,45647,45648` for content orders.

      The best way to get a list of completed item IDs in order is to make a request to the `GET /translations/orders/{id}` for translation orders and `GET /content/orders/{id}` for content orders endpoint and check the `items_approved` array.

      ## Review the item

      Once an item is finished, we allow for 96 hours for review.
      Sending a request to the `PUT /translations/items/{id}/approve` for translation items and `PUT /content/items/{id}/approve` for content items endpoint you’re able to update the status to `approved`.
      Marking something as approved is important for you as it puts more ordered items into production.
      The amount of concurrent orders in production is limited per client account.

      If you prefer not to manually approve items, or your system does not have the capability, you can simply add the `auto_approve=true` parameter to your item requests.
      This will instantly approve items when they are finished by our team, and provide you with the full translated text or written content.
      Please note that by using the `auto_approve` parameter you waive your right to request corrections.
      The `auto_approve` parameter is good to use if you have high volumes and doesn’t have the manpower to manually review everything.

      ## Request corrections for the item

      If an item requires corrections, you can request corrections using the `PUT /translations/items/{id}/revise` for translation items and `PUT /content/items/{id}/revise` for content items.
      Call and leave a comment for a contributor (writer/translator).
      Please be as descriptive as possible with your comment when you request a correction.
      The better feedback you give the better result you will get back.

      This workflow can be useful when you want to add specific automated quality checks on the content.

  - name: Authentication
    description: |
      In order to use the API, you have to authenticate your request by including your API Key as a bearer token value in the HTTP header:

      `Authorization: Bearer API_KEY_HERE`

      You must first <a href="https://app.topcontent.com/signup" target="_blank">create a Topcontent client account</a>.
      You will be provided with an API Key in the <a href="https://app.topcontent.com/settings/api" target="_blank">API & Integrations</a> section.
      If your client account is part of a Team you can only access the API Key if you are the owner of that Team.
  - name: Sandbox testing
    description: |
      To make it easier for you to build and properly test your connection we have created a sandbox environment.

      ## The test area for your API code

      Extra features in the sandbox that can be used for testing:
      - Add free credits to your account for testing.
      - Trigger the “completion” of your items, so that you can test what your code does in response.
      - Manually toggle between item states (```reviewable``` to ```approved```) and other actions without triggering webhooks.
      - Test webhooks by clicking the "Send Webhook" button.

      Note: The sandbox items database may occasionally be wiped clean to prepare it for new features so you should not rely on the sandbox for permanent storage.

      ## How to use the sandbox
      - Read the developer documentation.
      - Create a <a target="_blank" href="https://sandbox.topcontent.com/">sandbox account</a>.
      - Log in and grab a <a target="_blank" href="https://sandbox.topcontent.com/account/">sandbox API key</a>.
      - Test your app, using `http://sandbox.api.topcontent.com/v2/` as the base call URL.

      Ready to deploy? Head over to the live Topcontent site. Create a <a href="https://app.topcontent.com/signup" target="_blank">full client account</a>, grab a live API key - and remember to paste it into your app.
  - name: Handling errors
    description: |
      Whenever you send a request to the Topcontent API you’ll get a response in <a target="_blank" href="https://www.json.org/json-en.html">JSON (JavaScript Object Notation)</a> format.
      This is a standard for data communication that’s easy to read for humans as well as machines.
      Alongside the JSON-response an HTTP status code is sent that shows whether the request was successful or not.
      If it wasn’t, you can tell by the code and the `errors` array in the response what went wrong, why it went wrong and whether there is something you can do about it.

      ## The response types

      The first digit of the status code indicates the type or class of the status.
      Using this first digit you can determine the best approach for dealing with the error.
      The following classes of codes are relevant to the Topcontent API:

      - Codes in the `2xx` range comes with a Topcontent API response indicating success.
      - Codes in the `4xx` range are error codes indicating that  the client (your responsibility) seems to be causing the error. Whenever this happens you can change your code to prevent the error from happening again. The error for this specific request won’t go away by itself.
      - Codes in the `5xx` range are errors caused by the server (Topcontent’s responsibility). In the rare case you get this type of error, something is wrong with the Topcontent API. The errors should subside without your mediation. Please contact us if this happens.

      ## A successful request
      An HTTP status `200 OK`, `201 Created` or `204 No Content` is issued whenever your request was a success. Which type of success reply depends on the type of request you send. See the full list of status code below.

      ## Examples of error responses

      The HTTP status `401 Unauthorized` indicates missing or incorrect authorization to execute the desired action.

      Another error that occurs often, is the well-known HTTP status `404 Not Found`, which indicates the object you’re trying to retrieve or manipulate does not exist.

      Sometimes a status HTTP `422 Unprocessable Entity` is returned.
      When it occurs there is extra information in the JSON about what part or field of your request is likely to be causing the error.
      In these cases, you will find the response has the parameter field.

      ## All possible status codes

      The Topcontent API will only ever return a subset of all legal HTTP status codes. Here’s the full list of Topcontent API status codes:

      Code | Description
      --------- | -------
      200 |	OK – Your request was successful.
      201 |	Created – The entity was created successfully.
      204 |	No Content – The requested entity was canceled/deleted successfully.
      400 |	Bad Request – The Topcontent API was unable to understand your request. There might be an error in your syntax.
      401 |	Unauthorized – Your request wasn’t executed due to failed authentication. Check your API key.
      403 |	Forbidden – You do not have access to the requested resource.
      404 |	Not Found – The object referenced by your URL does not exist.
      405 |	Method Not Allowed – You’re trying to use an HTTP method that is not applicable on this URL or resource. Refer to the Allow header to see which methods the endpoint supports.
      415 |	Unsupported Media Type – Your request’s encoding is not supported or is incorrectly understood. Please always use JSON.
      422 |	Unprocessable Entity – We could not process your request due to another reason than the ones listed above. The response usually contains a field property to indicate which field is causing the issue.
      429 |	Too Many Requests – Your request has hit a rate limit. Please wait for a bit and retry.
      500 |	Internal Server Error – An internal server error occurred while processing your request. Our developers are notified automatically, but if you have any information on how you triggered the problem, please contact us.
      502 |	Bad Gateway – The service is temporarily unavailable, either due to calamity or (planned) maintenance. Please retry the request at a later time.
      503 |	Service Unavailable – The service is temporarily unavailable, either due to calamity or (planned) maintenance. Please retry the request at a later time.
      504 |	Gateway Timeout – Your request is causing an unusually long process time.

  - name: Webhooks
    description: |
      Webhooks are used to process real-time status updates, for example when an item is reviewable.
      When submitting an order, you can set “callback_url” for each item in the order.
      Topcontent will post any updates about the item as they happen which makes it the most efficient way to sync your system with Topcontent.

      Callback notifications are sent when:
      - An item is ready for review
      - An item has been approved automatically
      - An item is manually approved via our Topcontent self-service interface

      Topcontent will send webhooks every 30 minutes for 24 hours until we receive a 200 status response.

      Parameters to callbacks are formatted in JSON and submitted with a POST call.
      An Item Payload will be POSTed as if it were a response.

      The following is an example of the payload in the webhook from the Topcontent API:
      ```
      {
          "item_id": 167834,
          "order_id": 3456,
          "credits_used": 1.08,
          "currency": "EUR",
          "status": "approved",
          "source_language_code": "en",
          "target_language_code": "sv",
          "quality": "business",
          "source_text": "Get the Best Product Description Writing Service with Topcontent",
          "translated_text": "Få de bästa produktbeskrivningarna skrivna av Topcontent",
          "auto_approve": false,
          "custom_data": "{request_id: 87353}",
          "callback_url": "https://mysite.com/receive_topcontent_items"
      }
      ```
      Based on the status of the item you can make necessary actions on your end.
  - name: Best practices
    description: |
      The following checklist contains practices critical for healthy integration. Make sure your integration has all of them.
      ## Follow the Topcontent API workflow
      The proper workflow is as follows:
      - Submit text/file for translation or place a content order
      - Get order status
      - Retrieve completed items

      ## Make use of triple brackets when ordering translations
      If ordering translations triple brackets are useful to make sure certain texts, such as brand names, are preserved and uncharged. [Learn more](#)

      Note: HTML tags are an exception to this rule. Do not bracket them as you are not charged for them by default.

      ## Provide instructions for contributors (writers and translators)

      The better instructions you add the better content you will receive from the writers. <a target="_blank" href="https://help.topcontent.com/en/article/how-to-write-good-instructions-5e8377/">Read more</a> about how to write good instructions.

      ## Store internal information in custom_data

      The “custom_data” parameter is designed for users of our API to help connect the information in your system for reference.
      Do not store reference information in the webhook_url or slug.
      We won’t change the custom_data, we will just return it to you as is.

      ## Use both webhook functionality AND update polling, not just one or the other

      The webhook functionality is used to receive notifications about the item and is an easy way to get updates when your items change status.
      You can learn more about when these webhooks are sent on the [Webhooks](#tag/Webhooks) page.

      However, due to possible network issues, callbacks must not be relied upon entirely.
      The Internet is an unpredictable place.
      Make sure to periodically poll for items to stay updated with your items’ statuses.

      ## Include the functionality to approve or return the items for corrections
      Make sure to include the option to approve or return items for corrections.

      It is best to use ```auto_approve = 0```. By getting the item approved, you acknowledge that you are happy with the result and thus forfeit your right to request for corrections.
  - name: Translation orders
    description: |
      This describes the endpoints that deal with translation orders using the Topcontent API.
  - name: Translation items
    description: |
      This describes the endpoints that deal with translation items using the Topcontent API.
  - name: Translation language directions
    description: |
      This describes the endpoints that deal with translation language directions on the Topcontent API.
  - name: Review translation item
    description: |
      This describes the endpoints that deal with translation reviewable process on the Topcontent API.
  - name: Translation services
    description: |
      This describes the endpoints that deal with Translation Service using the Topcontent API.
  - name: Content Orders
    description: |
      This describes the endpoints that deal with content orders on the Topcontent API.
  - name: Content Items
    description: |
      This describes the endpoints that deal with content items on the Topcontent API.
  - name: Content Qualities
    description: |
      This describes the endpoints that deal with content qualities on the Topcontent API.
  - name: Content Languages
    description: |
      This describes the endpoints that deal with content languages on the Topcontent API.
  - name: Invoices
    description: |
      This describes the endpoints that deal with account invoices and billing using the Topcontent API.
  - name: Balance
    description: |
      This describes the endpoints that deal with the credit balance of your Topcontent client account.

x-tagGroups:
  - name: Topcontent API
    tags:
      - Overview
      - Workflows
      - Authentication
      - Sandbox testing
      - Handling errors
      - Webhooks
      - Best practices
  - name: Translations
    tags:
      - Translation orders
      - Translation items
      - Translation services
  - name: Content
    tags:
      - Content orders
      - Content items
      - Content services
  - name: Account
    tags:
      - Invoices
      - Balance
  - name: Services
    tags:
      - Languages
servers:
  - url: 'https://api.topcontent.com/v2'
  - url: 'https://sandbox.api.topcontent.com/v2'
paths:
  '/translations/orders':
    $ref: 'paths/translations-orders.yaml'
  '/translations/orders/{id}':
    $ref: 'paths/translations-order@id.yaml'
  '/translations/items':
    $ref: 'paths/translations-items.yaml'
  '/translations/items/{id}/approve':
    $ref: 'paths/translations-items@id-approve.yaml'
  '/translations/items/{id}/revise':
    $ref: 'paths/translations-items@id-revise.yaml'
  '/translations/language-directions':
    $ref: 'paths/translations-language-directions.yaml'

  '/content/orders':
    $ref: 'paths/content-orders.yaml'
  '/content/orders/{id}':
    $ref: 'paths/content-order@id.yaml'
  '/content/items':
    $ref: 'paths/content-items.yaml'
  '/content/items/{id}/approve':
    $ref: 'paths/content-items@id-approve.yaml'
  '/content/items/{id}/revise':
    $ref: 'paths/content-items@id-revise.yaml'
  '/content/languages':
    $ref: 'paths/content-languages.yaml'

  '/invoices':
    $ref: 'paths/invoices.yaml'
  '/balance':
    $ref: 'paths/balance.yaml'
  '/balance/transactions':
    $ref: 'paths/balance-transactions.yaml'

  '/languages':
    $ref: 'paths/service-languages.yaml'
#components: