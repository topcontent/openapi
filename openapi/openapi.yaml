openapi: 3.0.2
info:
  version: 2.1
  title: Topcontent REST API
  termsOfService: 'https://topcontent.com/terms-and-conditions/'
  contact:
    email: support@topcontent.com
  x-logo:
    url: 'https://topcontent.com/developers/api-documentation/images/logo_doc.png'
#  description: >
#externalDocs:
#  description: Find out how to create a GitHub repo for your OpenAPI definition.
#  url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - name: Introduction
    description: |
      Welcome to the reference for the Topcontent REST API!
      ## Flow
      The Topcontent API allows you to connect your app to Topcontent, and order human translation and content without needing to use our self-service. Because human translation and writing is not instant, our API is asynchronous. This means that you need to allow time for contributors to complete their work.
      ## What happens behind the scenes
      Once an order has been submitted, Topcontent contributorrs receive a notification of new work available and work on tasks on a first-come, first-serve basis. They work on the tasks within our system’s interface.
      ## Submitting an order
      Submitting an order to Topcontent is a straightforward process.
      First you’ll need to identify the content you want to have translated or written and build an item payload that includes all nessesarly inforrmation.
      This could be 1 large piece of text, such as an email or a blog post, or this could be several smaller content strings.
      Each piece of content that is uniquely identified in your code will be it’s own “item” for a Topconten contributor.

      In your system, these are likely associated with a unique ID in a database.
      It will be important to know which content is connected to each row in the database, so that when Topcontent returns the item you are able to easily identify where it will be added to your system.
      This is done by using the “custom_data” parameter.

      The most common way to work with the Topcontent API is to set a location for us to push notifications to.
      This is done by setting the “callback_options” to a public accessible endpoint.
      Whenever there is an update to the job, like when a contributor starts working on the content or has finished the item, Topcontent will POST the content to the callback_url provided. //TODO

      The more information a contributor has about the text they are working on, the higher the quality will be.
      All context for an item can be appended to the “instructions” parameter when sending an item.
      For example, if you have a photo that could go along with a product description, or a link to a blog post, these should be included.
      You may also want to include a style guide to maintain a consistent tone across all of the work Topcontent does for you.

      Once an order has been placed, you will receive an “order_id” back.

      ## Checking on the status of the order
      Once an item has been sent to Topcontent, it can go through a few different statuses.
      Initially all items that are sent are first put into a queuing system. //TODO drafts.
      This allows us to accept very large payloads from any number of users 24/7. In the background, we’ll begin processing these items and making them “available” to our contributors.

      Once a contributor starts to work on an item, we consider the item “in_production”.
      The item will remain in this state until they’ve completed the work.
      At this time the item will either be in a ‘reviewable’ state (if you want to review the item and perhaps communicate with our contributor about changes you’d like to see made) or it will be in the ‘approved’ state.

      At anytime you may get an update on the items in the order by sending a GET request to the ```/translations/orders/{id}``` for translation items and ```/content/orders/{id}``` for content orders end point.

      ## Getting the items back
      Typically Topcontent will send the completed items to your system as out team complete them.
      However, if you’d like to poll our system for an update, that can be best done by passing a comma separated list of item ids to ```GET /translations/items?ids=45646,45647,45648```.

      The best way to get a list of completed item IDs in an order is to make a request to the ```GET /translations/orders/{id}``` end point and check the “items_approved” array.

      ## Escaping content for translation
      Sometimes you might want to include text within an item that you do not need to be translated.
      To exclude text from the word count of a item, and indicate to the contributor that it does not need to be translated, you can wrap text within triple square brackets [[[like this]]].
      Please remember to close your triple brackets, and try to avoid having large areas of excluded text - it’s normally better to break the item into parts instead.

      ## Quality levels supported through the API
      Currently, our API supports the ```standard``` and ```business``` quality levels for translation orders and ```raw```, ```standard``` and ```business``` for content orders.

      Please see our <a target="_blind" href="https://topcontent.com/pricing/topcontent-quality-levels/">Quality Levels</a> page for more information.

      ## Review workflows
      Once an item is completed, we allow for 96 hours for review. Sending a request to the ```PUT /translations/items/{id}/approve``` endpoint you’re able to update the status to “approved”.

      If you prefer not to manually approve items, or your system does not have the capability, you can simply add the ```auto_approve=true``` parameter to your item requests.
      This will instantly approve items when they are submitted, and provide you with the full translated text or written content.
      Please note that by using the ```auto_approve``` parameter you waive your right to request corrections.

      ## Request corrections for the item
      If an item requires corrections, you can request them using the ``` PUT /translations/items/{id}/revise``` call, and leave a comment for a contributor.
      Please be as descriptive as possible with your comment when you request a correction.

      This workflow can be useful when you want to add specific automated quality checks on the content.

  - name: Sandbox testing
    description: |
      ## The test area for your API code
      What’s different about the sandbox?
      - Add free credits to your account for testing
      - Trigger the “completion” of your translation jobs (i.e. be a faux translator) so that you can test what your code does in response
      - Manually toggle between item states (e.g. ```in_production``` to ```reviewable```) and other actions without triggering callbacks
      - Test callbacks by clicking the Send Callback button

      Note: The sandbox items database may occasionally be wiped clean to prepare it for new features so you should not rely on the sandbox for permanent storage.
      ## How to use the sandbox
      - Read the developer documentation
      - Create a sandbox account
      - Log in and generate a set of sandbox API keys
      - Test your app, using http://api.sandbox.topcontent.com/v2/ as the base call URL

      Ready to deploy? Head over to the live Topcontent site. Create a full client account, generate a set of live API keys - and remember to paste them into your app.
  - name: Best practices
    description: |
      The following checklist contains practices critical for a healthy integration. Make sure your integration has all of them.
      ## Follow the Topcontent API workflow
      The proper workflow is as follows:
      - Submit text/file for translation or place a content order
      - Get order status
      - Retrieve completed items

      See the Visual Guide for more information.

      ## Make use of triple brackets
      If ordering trranslations triple brackets are useful to make sure certain texts, such as brand names, are preserved and uncharged. [Learn more](#)

      Note: HTML tags are an exception to this rule. Do not bracket them as you are not charged for them by default.
      ## Provide instructions for contributors
      //TODO
      ## Store internal information in custom_data
      The “custom_data” parameter is designed for users of our API to help connect information in your system for reference. Do not store reference information in the callback_url or slug.
      ## Use both callback functionality AND update polling, not just one or the other
      The callback/webhook functionality is used to receive notifications about the item and is an easy way to get updates when your items change status. You can learn more about when these callbacks are sent on the [callbacks page](#).

      However, due to possible network issues, callbacks must not be relied upon entirely. Make sure to periodically poll for items to stay updated with your items’ statuses. You can then the available items using the ```GET /translations/items/{ids}/``` endpoint as per the Visual Guide.
      ## Include the functionality to approve or return the items for corrections
      Make sure to include the option to approve or return items for corrections using the ```PUT /translations/items/``` endpoint as necessary.

      See our section for [review workflows](#) for more information.

      Unless you are working with trusted or preferred contributors, it is best to use ```auto_approve = 0```. By getting the item approved, you acknowledge that you are happy with the result, and thus forfeit your right to request for corrections.
  - name: Overview
    description: |
      In order to use the API, you should authenticate your request by including your API key in each request as a GET or POST as a 'api_key' param.
      ## Headers
      Make sure you have the following content type headers are set on every request:

      ```Accept: application/json``` ```Content-Type: application/json```
      ## Response Formats
      All API responses will contain at least 1 and possibly 2 key-value pairs. The first key’s name will depend on whether the call was successful or not. The second key name for a successful call with an expected payload will be “response”, i.e. ```{“status” : “ok”, “response” : ”...”}``` and a failed response will have second key name as “errors”, i.e. ```{“status” : “error”, “errors” : {“code” : "..."}}```
      ## Encoding
      Topcontent expects all data to be UTF-8 encoded and will respond with UTF-8 encoded data. Make sure you encode your data in UTF-8 to avoid issues.
      ## Throttling
      To ensure fair usage in our API, we put limits on the number of requests per originating IP address.

      //TODO

      Requests are tracked at millisecond granularity. For example, a 100 requests/second corresponds to 10 requests every 100 milliseconds.
  - name: Authentication
    description: |
      In order to use the API, you should authenticate your request by including your API Key as a bearer token value in an HTTP header:

      ```Authorization: Bearer API_KEY_HERE```

      You must first <a href="https://app.topcontent.com/signup" target="_blank">create a client</a> in the Topcontent UI. To do this, you must be an owner of your Topcontent team. This is a one-time operation. You will be provided with an API Key in the <a href="https://app.topcontent.com/settings/api" target="_blank">API & Integrations</a> section.
  - name: Callback URLs
    description: |
      When submitting an order, you can set “callback_url” for each item in the order. Topcontent will post any updates about the item as they happen which makes it the most efficient way to sync your system with Topcontent.

      Callback notifications are sent when:
      - An item is ready for review
      - An item has been approved automatically
      - An item is manually approved via our Topcontent self-service interface

  - name: Errors
    description: |
      Topcontent uses conventional HTTP response codes to indicate the success or failure of an API request. The table below contains a summary of the typical response codes:

      Code | Description
      --------- | -------
      200 | Everything is ok.
      400 | Valid data was given but the request has failed.
      401 | No valid API Key was given.
      404 | The request resource could not be found.
      422 | The payload has missing required parameters or invalid data was given.
      429 | Too many attempts.
      500 | Request failed due to an internal error in Topcontent.
      503 | Topcontent offline for maintenance.
  - name: Translation orders
    description: |
      This describes the endpoints that deal with translation orders on the Topcontent API.
  - name: Translation items
    description: |
      This describes the endpoints that deal with translation items on the Topcontent API.
  - name: Translation language directions
    description: |
      This describes the endpoints that deal with translation language directions on the Topcontent API.
  - name: Review translation item
    description: |
      This describes the endpoints that deal with translation reviewable process on the Topcontent API.
  - name: Translation services
    description: |
      This describes the endpoints that deal with Translation Service on the Topcontent API.
  - name: Content Orders
    description: |
      This describes the endpoints that deal with content orders on the Topcontent API.
  - name: Content Items
    description: |
      This describes the endpoints that deal with content items on the Topcontent API.
  - name: Content Qualities
    description: |
      This describes the endpoints that deal with content qualities on the Topcontent API.
  - name: Content Languages
    description: |
      This describes the endpoints that deal with content languages on the Topcontent API.
  - name: Invoices
    description: |
      This describes the endpoints that deal with account invoices on the Topcontent API.
  - name: Balance
    description: |
      This describes the endpoints that deal with balance on the Topcontent API.

x-tagGroups:
  - name: Getting started
    tags:
      - Introduction
      - Sandbox testing
      - Best Ppractices
  - name: API Details
    tags:
      - Overview
      - Authentication
      - Callback URLs
      - Errors
  - name: Translations
    tags:
      - Translation orders
      - Translation items
      - Translation services
  - name: Content
    tags:
      - Content orders
      - Content items
      - Content services
  - name: Account
    tags:
      - Invoices
      - Balance
  - name: Services
    tags:
      - Languages
servers:
  - url: 'https://app.topcontent.com/api/v2'
paths:
  '/translations/orders':
    $ref: 'paths/translations-orders.yaml'
  '/translations/orders/{id}':
    $ref: 'paths/translations-order@id.yaml'
  '/translations/items':
    $ref: 'paths/translations-items.yaml'
  '/translations/items/{id}/approve':
    $ref: 'paths/translations-items@id-approve.yaml'
  '/translations/items/{id}/revise':
    $ref: 'paths/translations-items@id-revise.yaml'
  '/translations/language-directions':
    $ref: 'paths/translations-language-directions.yaml'

  '/content/orders':
    $ref: 'paths/content-orders.yaml'
  '/content/orders/{id}':
    $ref: 'paths/content-order@id.yaml'
  '/content/items':
    $ref: 'paths/content-items.yaml'
  '/content/items/{id}/approve':
    $ref: 'paths/content-items@id-approve.yaml'
  '/content/items/{id}/revise':
    $ref: 'paths/content-items@id-revise.yaml'
  '/content/languages':
    $ref: 'paths/content-languages.yaml'

  '/invoices':
    $ref: 'paths/invoices.yaml'
  '/balance':
    $ref: 'paths/balance.yaml'
  '/balance/transactions':
    $ref: 'paths/balance-transactions.yaml'

  '/service/languages':
    $ref: 'paths/service-languages.yaml'
#components: